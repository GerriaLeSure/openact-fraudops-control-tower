name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        service: [score-svc, decision-svc, case-svc, gateway, model-monitor-svc]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r services/${{ matrix.service }}/requirements.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 services/${{ matrix.service }}/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 services/${{ matrix.service }}/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        pip install black
        black --check services/${{ matrix.service }}/

    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pytest services/${{ matrix.service }}/tests/ -v --cov=services/${{ matrix.service }}/app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        echo "JWT_SECRET=test-secret" > .env
        echo "PG_USER=fraudops" >> .env
        echo "PG_PASSWORD=fraudops" >> .env
        echo "PG_DB=fraudops" >> .env
        echo "MINIO_USER=minio" >> .env
        echo "MINIO_PASS=minio123" >> .env

    - name: Build services
      run: docker compose build

    - name: Start infrastructure
      run: |
        docker compose up -d zookeeper kafka redis postgres mongo minio
        sleep 30

    - name: Start services
      run: |
        docker compose up -d score-svc decision-svc case-svc model-monitor-svc gateway
        sleep 30

    - name: Run integration tests
      run: |
        python test_services.py

    - name: Stop services
      if: always()
      run: docker compose down

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker-compose.yml
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Create .env file
      run: |
        echo "JWT_SECRET=test-secret" > .env
        echo "PG_USER=fraudops" >> .env
        echo "PG_PASSWORD=fraudops" >> .env
        echo "PG_DB=fraudops" >> .env
        echo "MINIO_USER=minio" >> .env
        echo "MINIO_PASS=minio123" >> .env

    - name: Start services
      run: |
        docker compose up -d
        sleep 60

    - name: Run performance tests
      run: |
        python tests/e2e/performance_test.py

    - name: Stop services
      if: always()
      run: docker compose down